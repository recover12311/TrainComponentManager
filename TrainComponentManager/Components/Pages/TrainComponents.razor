@page "/components"
@using System.Net.Http.Json
@using TrainComponentManager.Data.DTO
@using System.Threading;
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Train Component Management</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMessage
    </div>
}

@if (successMessage != null)
{
    <div class="alert alert-success" role="alert">
        <strong>Success:</strong> @successMessage
    </div>
    @code {
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (successMessage != null && !string.IsNullOrEmpty(successMessage))
            {
                await Task.Delay(5000); // Display for 5 seconds
                successMessage = null;
                StateHasChanged();
            }
        }
    }
}

<input value="@searchTerm" @oninput="OnSearchInput" placeholder="🔍 Search..." class="form-control mb-3" />

<div class="card mb-4">
    <div class="card-header">
        <h4>Add New Component</h4>
    </div>
    <div class="card-body">
        <EditForm Model="@newComponentDto" OnValidSubmit="HandleCreateComponent">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-4">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="newComponentDto.Name" />
                    <ValidationMessage For="@(() => newComponentDto.Name)" />
                </div>
                <div class="col-md-4">
                    <label for="uniqueNumber" class="form-label">Unique Number</label>
                    <InputText id="uniqueNumber" class="form-control" @bind-Value="newComponentDto.UniqueNumber" />
                    <ValidationMessage For="@(() => newComponentDto.UniqueNumber)" />
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <div class="form-check">
                        <InputCheckbox id="canAssignQuantity" class="form-check-input" @bind-Value="newComponentDto.CanAssignQuantity" />
                        <label class="form-check-label" for="canAssignQuantity">Can Assign Quantity</label>
                    </div>
                </div>
            </div>
            
            @if (newComponentDto.CanAssignQuantity)
            {
                <div class="row g-3 mt-2">
                    <div class="col-md-4">
                        <label for="initialQuantity" class="form-label">Initial Quantity (if assignable)</label>
                        <InputNumber id="initialQuantity" class="form-control" @bind-Value="newComponentDto.Quantity" />
                        <ValidationMessage For="@(() => newComponentDto.Quantity)" />
                    </div>
                    <div class="col-md-8 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary">Add Component</button>
                    </div>
                </div>
            }
            else
            {
                <div class="row g-3 mt-2">
                    <div class="col-12 d-flex justify-content-end">
                         <button type="submit" class="btn btn-primary">Add Component</button>
                    </div>
                </div>
            }
        </EditForm>
    </div>
</div>

@if (components == null)
{
    <p><em>Loading...</em></p>
}
else if (!components.Any())
{
    <p class="alert alert-info">Components not found.</p>
}
else
{
    <table class="table table-striped table-bordered table-sm">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Unique number</th>
                <th>Quantity</th>
                <th style="width: 150px;">Action</th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var item in components)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.UniqueNumber</td>
                    <td>@(item.CanAssignQuantity? item.Quantity?.ToString() ?? "—" : "н/д")</td>
                    <td>
                        <div class="d-flex flex-column gap-1">
                            @if (item.CanAssignQuantity)
                            {
                                <div class="input-group input-group-sm">
                                    <input type="number" class="form-control" @bind="item.NewQuantity" min="0"/>
                                    <button class="btn btn-success" @onclick="() => UpdateQuantity(item)">Set</button>
                                </div>
                            }
                            else
                            {
                                <span class="text-muted text-nowrap">Forbidden</span>
                            }
                            <button class="btn btn-danger btn-sm w-100" @onclick="() => DeleteComponent(item.Id, item.Name)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                var page = i;
                <li class="page-item @(currentPage == page ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(page)">@(page)</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
            </li>
        </ul>
        <div class="text-center">
            Showing @((currentPage - 1) * pageSize + 1) - @(Math.Min(currentPage * pageSize, totalCount)) of @totalCount components.
        </div>
    </nav>
}

@code {
    private List<TrainComponentDto> components = new();
    private string searchTerm = "";
    private string? errorMessage;
    private string? successMessage;
    private Timer _debounceTimer = default!;

    private HttpClient _httpClient = default!;
    private const int DEBOUNCE_DELAY_MS = 500;

    private CreateTrainComponentDto newComponentDto = new();

    private int currentPage = 1;
    private int pageSize = 10; 
    private int totalCount = 0;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("LocalApi");

        _debounceTimer = new Timer(async (state) =>
        {
            await InvokeAsync(async () =>
            {
                if (_httpClient != null)
                {
                    await LoadComponents();
                }
            });
        }, null, Timeout.Infinite, Timeout.Infinite);


        await LoadComponents();
    }

    private async Task LoadComponents()
    {
        try
        {
            errorMessage = null; // Clear any previous error messages
            successMessage = null; // Clear any previous success messages

            string requestUrl = $"api/traincomponents?pageNumber={currentPage}&pageSize={pageSize}";
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                requestUrl += $"&searchTerm={Uri.EscapeDataString(searchTerm)}";
            }

            var paginatedResult = await _httpClient.GetFromJsonAsync<PaginatedResult<TrainComponentDto>>(requestUrl);

            if (paginatedResult != null)
            {
                components = paginatedResult.Items.ToList();
                totalCount = paginatedResult.TotalCount;
                totalPages = paginatedResult.TotalPages;
            }
            else
            {
                components = new();
                totalCount = 0;
                totalPages = 1;
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Failed to load components: {ex.Message}. Check your API connection.";
            components = new();
            totalCount = 0;
            totalPages = 1;
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            components = new();
            totalCount = 0;
            totalPages = 1;
        }

        StateHasChanged(); // Force re-rendering to update the UI
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1; 
        _debounceTimer.Change(DEBOUNCE_DELAY_MS, Timeout.Infinite); // Reset the timer for debounce
    }

    private async Task UpdateQuantity(TrainComponentDto item)
    {
        errorMessage = null;
        successMessage = null;

        if (item.NewQuantity < 1)
        {
            errorMessage = $"The quantity must be a positive integer (greater than 0).";
            return;
        }

        try
        {
            var oldQuantity = item.Quantity;
            item.Quantity = item.NewQuantity;

            var response = await _httpClient.PutAsJsonAsync($"api/traincomponents/{item.Id}/quantity", item.NewQuantity);

            if (!response.IsSuccessStatusCode)
            {
                item.Quantity = oldQuantity;
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error updating quantity for {item.Name}: {response.StatusCode} - {errorContent}";
            }
            else
            {
                successMessage = $"Quantity for {item.Name} successfully updated to {item.Quantity}.";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"A network error occurred while updating: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error while updating: {ex.Message}";
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }

    private async Task HandleCreateComponent()
    {
        errorMessage = null;
        successMessage = null;

        if (newComponentDto.CanAssignQuantity && (newComponentDto.Quantity == null || newComponentDto.Quantity < 1))
        {
            if (newComponentDto.Quantity == null)
            {
                errorMessage = "Initial Quantity is required when 'Can Assign Quantity' is checked.";
            }
            else
            {
                errorMessage = "Initial Quantity must be a positive integer when 'Can Assign Quantity' is checked.";
            }
            return;
        }
        else if (!newComponentDto.CanAssignQuantity)
        {
            newComponentDto.Quantity = null;
        }

        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/traincomponents", newComponentDto);

            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Component '{newComponentDto.Name}' added successfully!";
                newComponentDto = new CreateTrainComponentDto(); // Reset form
                currentPage = 1; 
                await LoadComponents(); // Reload components to show the new one
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error adding component: {response.StatusCode} - {errorContent}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"A network error occurred while adding component: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred while adding component: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task DeleteComponent(int id, string name)
    {
        errorMessage = null;
        successMessage = null;

        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete component '{name}'?"))
        {
            return;
        }

        try
        {
            var response = await _httpClient.DeleteAsync($"api/traincomponents/{id}");

            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Component '{name}' deleted successfully!";
                currentPage = 1; // Reset to first page after deletion
                await LoadComponents(); // Reload components after deletion
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error deleting component '{name}': {response.StatusCode} - {errorContent}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"A network error occurred while deleting component '{name}': {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred while deleting component '{name}': {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadComponents();
        }
    }
}