@page "/components"
@using System.Net.Http.Json
@using TrainComponentManager.Data.DTO
@using System.Threading;
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>Train Component Management</h3>

<input value="@searchTerm" @oninput="OnSearchInput" placeholder="🔍 Search..." class="form-control mb-3" />

@if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMessage
    </div>
}

@if (successMessage != null)
{
    <div class="alert alert-success" role="alert">
        <strong>Success:</strong> @successMessage
    </div>
}

@if (components == null)
{
    <p><em>Loading...</em></p>
}
else if (!components.Any())
{
    <p class="alert alert-info">Components not found.</p>
}
else
{
    <table class="table table-striped table-bordered table-sm">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Unique number</th>
                <th>Quantity</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in components)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.UniqueNumber</td>
                    <td>@(item.CanAssignQuantity? item.Quantity?.ToString() ?? "—" : "н/д")</td>
                    <td>
                        @if (item.CanAssignQuantity)
                        {
                            <div class="d-flex align-items-center">
                                <input type="number" class="form-control form-control-sm w-auto me-2" @bind="item.NewQuantity" min="0"/>
                                <button class="btn btn-success btn-sm" @onclick="() => UpdateQuantity(item)">Set</button>
                            </div>
                        }
                        else
                        {
                            <span class="text-muted">Forbidden</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TrainComponentDto> components = new();
    private string searchTerm = "";
    private string? errorMessage;
    private string? successMessage;
    private Timer _debounceTimer = default!;

    private HttpClient _httpClient = default!;
    private const int DEBOUNCE_DELAY_MS = 1000;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("LocalApi");

        _debounceTimer = new Timer(async (state) =>
        {
            await InvokeAsync(async () =>
            {
                if (_httpClient != null)
                {
                    await LoadComponents();
                }
            });
        }, null, Timeout.Infinite, Timeout.Infinite);


        await LoadComponents();
    }

    private async Task LoadComponents()
    {
        try
        {
            string requestUrl = string.IsNullOrWhiteSpace(searchTerm) ?
                                "api/traincomponents" :
                                $"api/traincomponents?searchTerm={Uri.EscapeDataString(searchTerm)}";

            components = await _httpClient.GetFromJsonAsync<List<TrainComponentDto>>(requestUrl) ?? new();

            foreach (var component in components)
            {
                component.NewQuantity = component.Quantity;
            }

            errorMessage = null; // Clear previous error message
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Failed to load components: {ex.Message}. Check your API connection.";
            components = new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            components = new();
        }

        StateHasChanged(); // Force re-rendering to update the UI
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";

        _debounceTimer.Change(DEBOUNCE_DELAY_MS, Timeout.Infinite); // Reset the timer for debounce
    }

    private async Task UpdateQuantity(TrainComponentDto item)
    {
        errorMessage = null;
        successMessage = null; 

        if (item.NewQuantity < 1)
        {
            errorMessage = $"The quantity must be a positive integer (greater than 0).";
            return;
        }

        try
        {
            var oldQuantity = item.Quantity;
            item.Quantity = item.NewQuantity;

            var response = await _httpClient.PutAsJsonAsync($"api/traincomponents/{item.Id}/quantity", item.NewQuantity);

            if (!response.IsSuccessStatusCode)
            {
                item.Quantity = oldQuantity;
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error updating quantity for {item.Name}: {response.StatusCode} - {errorContent}";
            }
            else
            {
                successMessage = $"Quantity for {item.Name} successfully updated to {item.Quantity}.";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"A network error occurred while updating: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error while updating: {ex.Message}";
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}